from rest_framework import viewsets
from .models import User, Orders, Position, Category, Menu, –°ompound, Ingredients,Order_list
from .serializers import UserSerializer, OrdersSerializer, PositionSerializer, CategorySerializer, MenuSerializer, \
    –°ompoundSerializer, IngredientsSerializer
from main.tg_bot.user_private import *
from main.tg_bot.database import *


from django.utils import timezone
from asgiref.sync import sync_to_async


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


class OrdersViewSet(viewsets.ModelViewSet):
    queryset = Orders.objects.all()
    serializer_class = OrdersSerializer

    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        old_cooked = instance.cooked
        old_ready = instance.ready
        old_delivered = instance.deliveredSucces

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        response = super().update(request, *args, **kwargs)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        instance.refresh_from_db()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        if old_cooked != instance.cooked and instance.cooked:
            Order_list.objects.create(tg_id=instance.user.tg_id, withOrder=f"‚Äçüç≥ –¢–≤–æ–π –∑–∞–∫–∞–∑ #{instance.id} —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω")
            order3 = Orders.objects.get(id=instance.id)
            order3.cooking_notifyed_user = True
            order3.notify_pickers = True
            order3.save()
        if old_ready != instance.ready and instance.ready:
            Order_list.objects.create(tg_id=instance.user.tg_id, withOrder=f"üì¶ –¢–≤–æ–π –∑–∞–∫–∞–∑ #{instance.id} —É–∂–µ —Å–æ–±—Ä–∞–Ω")
            if instance.get_way =="–î–æ—Å—Ç–∞–≤–∫–∞":
                Order_list.objects.create(tg_id=-4272922175, withOrder=f"""–ó–∞–∫–∞–∑ #{instance.id}\nüìç –ê–¥—Ä–µ—Å: {instance.address}\nüïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {instance.time_date}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {instance.number}""")
                order2 = Orders.objects.get(id=instance.id)
                order2.status = Orders.StatusEnum.DELIVERY
                order2.picking_notifyed_user = True
                order2.save()
            else:
                Order_list.objects.create(tg_id=instance.user.tg_id, withOrder=f"""–ú–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ #{instance.id}. –ê–¥—Ä–µ—Å: –≥. –†—è–∑–∞–Ω—å, –£–ª. –ö—É—Ç—É–∑–æ–≤–∞ –¥. 15""")
                order = Orders.objects.get(id=order_id)
                order.deliveredSucces = True
                order.delivered_notifyed_user = True
                order.save()


        return response


class PositionViewSet(viewsets.ModelViewSet):
    queryset = Position.objects.all()
    serializer_class = PositionSerializer


class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer


class MenuViewSet(viewsets.ModelViewSet):
    queryset = Menu.objects.all()
    serializer_class = MenuSerializer


class –°ompoundViewSet(viewsets.ModelViewSet):
    queryset = –°ompound.objects.all()
    serializer_class = –°ompoundSerializer


class IngredientsViewSet(viewsets.ModelViewSet):
    queryset = Ingredients.objects.all()
    serializer_class = IngredientsSerializer
