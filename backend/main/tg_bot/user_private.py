from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import json
from asgiref.sync import sync_to_async
import requests
from geopy.geocoders import Nominatim
import main.tg_bot.reply as kb

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import LabeledPrice, PreCheckoutQuery, SuccessfulPayment, ContentType
from aiogram.utils.i18n import gettext as _
from main.tg_bot.classes_functions import Admin
from main.models import User, Orders,Order_list

from main.tg_bot.database import (fetch_order_by_id, fetch_orders, count_orders, get_users_status, get_users, get_pos)
from main.tg_bot.database import add_phone_number, add_user, create_order,d_success

user_private = Router()


PAYMENTS_PROVIDER_TOKEN = '381764678:TEST:90774'

@user_private.callback_query(F.data.startswith("order_d_"))
async def order_delivered_point(callback: CallbackQuery):
    order_id = callback.data.split("_")[2]
    is_delivered_updated = await d_success(order_id=order_id)

    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.")
    await callback.message.edit_reply_markup()



    

@user_private.message(CommandStart())
async def start_message(message: Message):
    await add_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pizza Fresca</b>! –ó–¥–µ—Å—å —Ç—ã \n'
                         '–º–æ–∂–µ—à—å: \n'
                         '\n'
                         'üçï –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É, –¥–µ—Å–µ—Ä—Ç, —Å—É–ø –∏ –º–Ω–æ–≥–æ \n'
                         '–≤—Å–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ! \n'
                         '\n'
                         'üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \n'
                         '\n'
                         'üîé –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ \n'
                         '\n'
                         '–°–∫–æ—Ä–µ–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å \n'
                         '–º–µ–Ω—é',reply_markup=kb.start_menu)


@user_private.message(lambda message: message.web_app_data)
async def pickuap(message: Message, state: FSMContext):
    data = message.web_app_data.data
    parsed_data = json.loads(data)
    await state.update_data(order_data=data)

    summa = parsed_data["Order"]["info"]["summa"]
    await message.answer(f'–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω')

    await message.answer(f'–¢—ã –æ—Ñ–æ—Ä–º–∏–ª(–∞) –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <b>{summa}</b>‚ÇΩ\n\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:',
                         reply_markup=kb.shipping_method())


@user_private.message(F.text == 'üìç –°–∞–º–æ–≤—ã–≤–æ–∑')
async def pickup(message: Message, state: FSMContext):
    await state.set_state(Admin.number)
    await state.update_data(get_way='–°–∞–º–æ–≤—ã–≤–æ–∑')

    await state.update_data(address='–°–∞–º–æ–≤—ã–≤–æ–∑')
    await state.update_data(time_data='–°–∞–º–æ–≤—ã–≤–æ–∑')

    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä\n'
                         '—Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)


@user_private.message(F.text == 'üöö –î–æ—Å—Ç–∞–≤–∫–∞')
async def delivery(message: Message, state: FSMContext):
    await state.set_state(Admin.geo)
    await state.update_data(get_way='–î–æ—Å—Ç–∞–≤–∫–∞')

    await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ \n'
                         '–æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=kb.get_geo)


@user_private.message(Admin.geo, F.text)
async def proccess_geo(message: Message, state: FSMContext):
    if message.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)
    else:
        address = message.text
        print(address)
        await state.update_data(address=address)
        await state.set_state(Admin.time_data)

        await message.answer('–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è \n'
                             '–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ \n'
                             '\n'
                             '<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</b> \n'
                             '–ü–ù-–ü–¢ 10:00-21:30 \n'
                             '–°–ë-–í–° 11:00-22:30 \n'
                             '+7(999) 999-99-21', reply_markup=kb.fast_delivery())


@user_private.message(Admin.geo, F.location)
async def process_geo(message: Message, state: FSMContext):
    location = message.location
    latitude = str(location.latitude)
    longitude = str(location.longitude)
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey=bcdcf8db-2ba0-4f7a-a73e-0148e88921e9&geocode={longitude},{latitude}&format=json"
    response = requests.get(url)
    data = response.json()
    if response.status_code == 200:
        data = response.json()
        try:
            address = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty']['GeocoderMetaData']['text']
        except (IndexError, KeyError):
            address = "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    else:
        address = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
   
    await state.update_data(address=address)
    await state.set_state(Admin.geo2)
    await message.answer(f'–í–∞—à –∞–¥—Ä–µ—Å {address}. –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –Ω–æ–º–µ—Ä –∏(–∏–ª–∏) –∫–≤–∞—Ä—Ç–∏—Ä—É. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥. 14 –∫–≤. 45.',reply_markup=kb.skip_geo2())

    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    if message.text == '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ':
        pass

@user_private.message(Admin.geo2)
async def proccess_geo(message: Message, state: FSMContext):
    data = await state.get_data()
    ad = data['address']
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        address = ad + " " + message.text
    else:
        address = ad
    print(address)
    await state.update_data(address=address)
    await state.set_state(Admin.time_data)

    await message.answer('–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è \n'
                         '–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ \n'
                         '\n'
                         '<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</b> \n'
                         '–ü–ù-–ü–¢ 10:00-21:30 \n'
                         '–°–ë-–í–° 11:00-22:30 \n'
                          '+7(999) 999-99-21', reply_markup=kb.fast_delivery())


@user_private.message(Admin.time_data)
async def procces_time_data(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å–≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)
    else:
        await state.update_data(time_data=message.text)
        await state.set_state(Admin.number)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä\n'
                             '—Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)


@user_private.message(Admin.number, F.contact)
async def proccess_number(message: Message, state: FSMContext):
    text = message.text
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)
    else:
        contact = message.contact.phone_number
        await state.update_data(number=contact)
        await state.set_state(Admin.comment)
        await message.answer('–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥',
                             reply_markup=kb.get_comment())


@user_private.message(Admin.number)
async def proccess_number(message: Message, state: FSMContext):
    text = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)
    else:
        contact = message.text
        await state.update_data(number=contact)
        await state.set_state(Admin.comment)
        await message.answer('–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥',
                             reply_markup=kb.get_comment())


@user_private.message(Admin.comment)
async def proccess_comment(message: Message, state: FSMContext):
    text = message.text

    if text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)
    elif text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.set_state(Admin.payment)
        await state.update_data(comment='–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç—Ä–∞—Ä–∏–µ–≤')

        await message.answer('–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=kb.payments())
    else:
        await state.update_data(comment=message.text)
        await state.set_state(Admin.payment)
        await message.answer('–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=kb.payments())


@user_private.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await  pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@user_private.message(lambda message: message.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await state.update_data(paid=True)
    data = await state.get_data()

    order_data = json.loads(data['order_data'])
    f = await create_order(data)

    
    await message.answer(f'‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –Ø –±—É–¥—É \n'
                             '–ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n'
                             '–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
                             reply_markup=ReplyKeyboardRemove())

@user_private.message(Admin.payment)
async def proccess_payment(message: Message, state: FSMContext):
    text = message.text

    if text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove())
        await start_message(message)

    elif text == '–°–±–µ—Ä–±–∞–Ω–∫':

        await state.update_data(payment=message.text)

        await state.update_data(user_tg_id=message.from_user.id)
        data = await state.get_data()
        # –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Å—Ç–µ–π—Ç—ã, –¥–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        # data = await state.get_data()
      
        

        prices = []
        order_data = json.loads(data['order_data'])

        for key, value in order_data['Order'].items():
            if key.startswith('Position'):
                for el in range(value['quantity']):
                    price_in_cents = int(float(value['price']) * 100)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∏
                    prices.append(LabeledPrice(label=value['name'], amount=price_in_cents))
        

        await message.answer(f'–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',reply_markup=ReplyKeyboardRemove())
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title='PIZZA FRESKA',
            description='–ü–∏—Ü—Ü–µ—Ä–∏—è',
            payload='some-invoice-payload-for-our-internal-use',
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency='RUB',
            prices=prices,
            start_parameter='example'
        )
       

        await add_phone_number(message.from_user.id, data['number'])
        
        await state.clear()
    elif text == '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏':
        
        await state.update_data(payment=message.text)
        await state.update_data(paid=False)

        await state.update_data(user_tg_id=message.from_user.id)
        data = await state.get_data()
        # –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Å—Ç–µ–π—Ç—ã, –¥–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        # data = await state.get_data()

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
        f = await create_order(data)
        await add_phone_number(message.from_user.id, data['number'])
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
        await message.answer('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –Ø –±—É–¥—É \n'
                             '–ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n'
                             '–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()


@user_private.message(F.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã ‚ÑπÔ∏è')
async def my_orders(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    await message.answer('–ú–æ—Ç –∑–∞–∫–∞–∑—ã', reply_markup=ReplyKeyboardRemove())
    await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', reply_markup=await kb.list_orders(tg_id))


@user_private.callback_query(F.data.startswith('next_page_') | F.data.startswith('prev_page_'))
async def change_page(callback: CallbackQuery):
    tg_id = callback.from_user.id
    await callback.answer()
    new_page = int(callback.data.split('_')[-1])
    await callback.message.edit_reply_markup(reply_markup=await kb.list_orders(tg_id, new_page))


@user_private.callback_query(F.data.startswith('order_'))
async def order_information(callback: CallbackQuery):
    order_id = int(callback.data.split('_')[-1])
    order = await fetch_order_by_id(order_id)

    order = order[0]

    posl = ""

    positions = await get_pos(order["id"])
    for el in range(len(positions)):
        s = str(positions[el]["id"]) + ". " + str(positions[el]["name"]) + ", " + str(positions[el]["price"])
        posl = posl + s + "\n"

    if order["status"] == "CK":
        order["status"] = "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
    elif order["status"] == "DL":
        order["status"] = "–í –¥–æ—Å—Ç–∞–≤–∫–µ"
    elif order["status"] == "RC":
        order["status"] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"

    await callback.answer()
    await callback.message.answer(f'‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order["id"]}</b> \n'
                                  '\n'
                                  f'<b>–î–∞—Ç–∞</b>: {order["date"]} \n'
                                  f'<b>–°—Ç–∞—Ç—É—Å</b>: {order["status"]} \n'
                                  '\n'
                                  '<b>–ü–æ–∑–∏—Ü–∏–∏</b>: \n'
                                  f'{posl} \n'
                                  '\n'
                                  f'<b>–ò—Ç–æ–≥–æ</b>: {order["summa"]}—Ä')
