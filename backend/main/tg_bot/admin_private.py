from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from decimal import Decimal  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import aiofiles
import os

from main.models import User,Menu,Ingredients
from main.tg_bot.database import *
from main.tg_bot.classes_functions import Admin
import main.tg_bot.reply as kb
from main.tg_bot.database import check_admin



admin_private = Router()




@admin_private.message(Command('admin'))
async def admin_panel(message: Message):
    ch = await check_admin(message.from_user.id)
    if ch:
        await message.answer('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@admin_private.callback_query(F.data == 'statistics')
async def statistics(callback: CallbackQuery):
    await callback.answer()
    
    q = await get_users() 
    q2 = await get_users_status() 
    q3 = await get_users_status2() 
    
    total_orders = await get_total_orders_count()
    today_orders = await get_today_orders_count()
    week_orders = await get_week_orders_count()
    month_orders = await get_month_orders_count()
    
    await callback.message.answer('üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n'
                                  f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q}</b> \n'
                                  f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q2}</b> \n'
                                  f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{q3}</b> \n'
                                  '\n'
                                  'üì¶ <b>–ó–∞–∫–∞–∑—ã</b> \n'
                                  f'–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{week_orders}</b>\n'
                                  f'–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü: <b>{month_orders}</b>')


@admin_private.callback_query(F.data == 'add_position')
async def mailing_users(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())

@admin_private.callback_query(F.data == 'add_pizza')
async def add_pizza(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.position_name)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.position_name)
async def proccess__pizza_name(message: Message, state: FSMContext):
    await state.update_data(position_name=message.text)
    user_message = message.text
    await state.set_state(Admin.position_photo)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.position_photo)
async def process_position_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏.')
        return
    
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"static/media/menu_photos/{file_id}.jpg"
    destination = f"{file_name}"
    
    await state.update_data(position_photo=file_name)

    async with aiofiles.open(destination, 'wb') as out_file:
        file = await message.bot.download_file(file_path)
        await out_file.write(file.read())
    
    await state.set_state(Admin.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@admin_private.message(Admin.description)
async def proccess_pizza_description(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(description=message.text)
    await state.set_state(Admin.calorie_content)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')


@admin_private.message(Admin.calorie_content)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(calorie_content=message.text)
    await state.set_state(Admin.ingredients)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@admin_private.message(Admin.ingredients)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(',')]
    await state.update_data(ingredients=ingredients_list)
    await state.set_state(Admin.allergens)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—Ç—ã')

@admin_private.message(Admin.allergens)
async def proccess_desserts_allergens(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(allergens=message.text)
    await state.set_state(Admin.cost)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')

@admin_private.message(Admin.cost)
async def procces_pizza_cost(message: Message, state: FSMContext):
    await state.update_data(cost=message.text)
    data = await state.get_data()
    # name = data['position_name']
    # photo = data['position_photo']
    # description = data['description']
    # calorie_content = data['calorie_content']
    # allergens = data['allergens']
    cost = data['cost']
    try:
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–¥
        cost = Decimal(data['cost'])
        category_name = '–ü–∏—Ü—Ü–∞'
        category = await sync_to_async(Category.objects.get)(name=category_name)
        
        menu_item = await sync_to_async(Menu.objects.create)(
            photo=data['position_photo'],
            name=data['position_name'],
            weight='500',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            allergens=data['allergens'],
            energy_valuable=data['calorie_content'],
            compounds='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=category,
            price=cost
        )
        ingredients_list = data['ingredients']
        for ingredient_name in ingredients_list:
            await sync_to_async(Ingredients.objects.create)(
                name=ingredient_name,
                dish=menu_item,
                isInDish=True
            )
        await message.answer(f'‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - {cost}')
        await admin_panel(message)
        await state.clear()
    except TypeError as te:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        await state.set_state(Admin.cost)



@admin_private.callback_query(F.data == 'add_desserts')
async def add_desserts(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.position_name)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.position_name)
async def proccess__desserts_name(message: Message, state: FSMContext):
    await state.update_data(position_name=message.text)
    user_message = message.text
    await state.set_state(Admin.position_photo)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.position_photo)
async def process_position_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏.')
        return
    
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"static/media/menu_photos/{file_id}.jpg"

    destination = f"{file_name}"
    
    await state.update_data(position_photo=file_name)

    async with aiofiles.open(destination, 'wb') as out_file:
        file = await message.bot.download_file(file_path)
        await out_file.write(file.read())
    
    await state.set_state(Admin.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@admin_private.message(Admin.description)
async def proccess_desserts_description(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(description=message.text)
    await state.set_state(Admin.calorie_content)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')

@admin_private.message(Admin.calorie_content)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(calorie_content=message.text)
    await state.set_state(Admin.ingredients)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@admin_private.message(Admin.ingredients)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(',')]
    await state.update_data(ingredients=ingredients_list)
    await state.set_state(Admin.allergens)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—Ç—ã')

@admin_private.message(Admin.allergens)
async def proccess_desserts_allergens(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(allergens=message.text)
    await state.set_state(Admin.cost)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')
@admin_private.message(Admin.cost)
async def procces_pizza_cost(message: Message, state: FSMContext):
    await state.update_data(cost=message.text)
    data = await state.get_data()
    # name = data['position_name']
    # photo = data['position_photo']
    # description = data['description']
    # calorie_content = data['calorie_content']
    # allergens = data['allergens']
    cost = data['cost']
    try:
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–¥
        cost = Decimal(data['cost'])
        category_name = '–ü–∏—Ü—Ü–∞'
        category = await sync_to_async(Category.objects.get)(name=category_name)
        
        menu_item = await sync_to_async(Menu.objects.create)(
            photo=data['position_photo'],
            name=data['position_name'],
            weight='500',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            allergens=data['allergens'],
            energy_valuable=data['calorie_content'],
            compounds='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=category,
            price=cost
        )
        ingredients_list = data['ingredients']
        for ingredient_name in ingredients_list:
            await sync_to_async(Ingredients.objects.create)(
                name=ingredient_name,
                dish=menu_item,
                isInDish=True
            )
        await message.answer(f'‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - {cost}')
        await admin_panel(message)
        await state.clear()
    except TypeError as te:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        await state.set_state(Admin.cost)

@admin_private.callback_query(F.data == 'add_salads')
async def add_salads(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.position_name)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.position_name)
async def proccess__salads_name(message: Message, state: FSMContext):
    await state.update_data(position_name=message.text)
    user_message = message.text
    await state.set_state(Admin.position_photo)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.position_photo)
async def process_position_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏.')
        return
    
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"static/media/menu_photos/{file_id}.jpg"
    
    destination = f"{file_name}"
    
    await state.update_data(position_photo=file_name)

    async with aiofiles.open(destination, 'wb') as out_file:
        file = await message.bot.download_file(file_path)
        await out_file.write(file.read())
    
    await state.set_state(Admin.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@admin_private.message(Admin.description)
async def proccess_salads_description(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(description=message.text)
    await state.set_state(Admin.calorie_content)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')



@admin_private.message(Admin.calorie_content)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(calorie_content=message.text)
    await state.set_state(Admin.ingredients)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@admin_private.message(Admin.ingredients)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(',')]
    await state.update_data(ingredients=ingredients_list)
    await state.set_state(Admin.allergens)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—Ç—ã')

@admin_private.message(Admin.allergens)
async def proccess_desserts_allergens(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(allergens=message.text)
    await state.set_state(Admin.cost)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')


@admin_private.message(Admin.cost)
async def procces_pizza_cost(message: Message, state: FSMContext):
    await state.update_data(cost=message.text)
    data = await state.get_data()
    # name = data['position_name']
    # photo = data['position_photo']
    # description = data['description']
    # calorie_content = data['calorie_content']
    # allergens = data['allergens']
    cost = data['cost']
    try:
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–¥
        cost = Decimal(data['cost'])
        category_name = '–ü–∏—Ü—Ü–∞'
        category = await sync_to_async(Category.objects.get)(name=category_name)
        
        menu_item = await sync_to_async(Menu.objects.create)(
            photo=data['position_photo'],
            name=data['position_name'],
            weight='500',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            allergens=data['allergens'],
            energy_valuable=data['calorie_content'],
            compounds='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=category,
            price=cost
        )
        ingredients_list = data['ingredients']
        for ingredient_name in ingredients_list:
            await sync_to_async(Ingredients.objects.create)(
                name=ingredient_name,
                dish=menu_item,
                isInDish=True
            )
        await message.answer(f'‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - {cost}')
        await admin_panel(message)
        await state.clear()
    except TypeError as te:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        await state.set_state(Admin.cost)


@admin_private.callback_query(F.data == 'add_soups')
async def add_soups(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.position_name)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.position_name)
async def proccess__soups_name(message: Message, state: FSMContext):
    await state.update_data(position_name=message.text)
    user_message = message.text
    await state.set_state(Admin.position_photo)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.position_photo)
async def process_position_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏.')
        return
    
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"static/media/menu_photos/{file_id}.jpg"

    destination = f"{file_name}"
    
    await state.update_data(position_photo=file_name)

    async with aiofiles.open(destination, 'wb') as out_file:
        file = await message.bot.download_file(file_path)
        await out_file.write(file.read())
    
    await state.set_state(Admin.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@admin_private.message(Admin.description)
async def proccess_soups_description(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(description=message.text)
    await state.set_state(Admin.calorie_content)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')


@admin_private.message(Admin.calorie_content)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(calorie_content=message.text)
    await state.set_state(Admin.ingredients)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@admin_private.message(Admin.ingredients)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(',')]
    await state.update_data(ingredients=ingredients_list)
    await state.set_state(Admin.allergens)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—Ç—ã')

@admin_private.message(Admin.allergens)
async def proccess_desserts_allergens(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(allergens=message.text)
    await state.set_state(Admin.cost)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')


@admin_private.message(Admin.cost)
async def procces_pizza_cost(message: Message, state: FSMContext):
    await state.update_data(cost=message.text)
    data = await state.get_data()
    # name = data['position_name']
    # photo = data['position_photo']
    # description = data['description']
    # calorie_content = data['calorie_content']
    # allergens = data['allergens']
    cost = data['cost']
    try:
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–¥
        cost = Decimal(data['cost'])
        category_name = '–ü–∏—Ü—Ü–∞'
        category = await sync_to_async(Category.objects.get)(name=category_name)
        
        menu_item = await sync_to_async(Menu.objects.create)(
            photo=data['position_photo'],
            name=data['position_name'],
            weight='500',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            allergens=data['allergens'],
            energy_valuable=data['calorie_content'],
            compounds='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=category,
            price=cost
        )
        ingredients_list = data['ingredients']
        for ingredient_name in ingredients_list:
            await sync_to_async(Ingredients.objects.create)(
                name=ingredient_name,
                dish=menu_item,
                isInDish=True
            )
        await message.answer(f'‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - {cost}')
        await admin_panel(message)
        await state.clear()
    except TypeError as te:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        await state.set_state(Admin.cost)

@admin_private.callback_query(F.data == 'add_Drinks')
async def add_Drinks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.position_name)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=kb.offer_cancel())

@admin_private.message(Admin.position_name)
async def proccess__Drinks_name(message: Message, state: FSMContext):
    await state.update_data(position_name=message.text)
    user_message = message.text
    await state.set_state(Admin.position_photo)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏')

@admin_private.message(Admin.position_photo)
async def process_position_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏.')
        return
    
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"static/media/menu_photos/{file_id}.jpg"

    destination = f"{file_name}"
    
    await state.update_data(position_photo=file_name)

    async with aiofiles.open(destination, 'wb') as out_file:
        file = await message.bot.download_file(file_path)
        await out_file.write(file.read())
    
    await state.set_state(Admin.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@admin_private.message(Admin.description)
async def proccess_Drinks_description(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(description=message.text)
    await state.set_state(Admin.calorie_content)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')



@admin_private.message(Admin.calorie_content)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(calorie_content=message.text)
    await state.set_state(Admin.ingredients)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@admin_private.message(Admin.ingredients)
async def proccess_desserts_calorie_content(message: Message, state: FSMContext):
    user_message = message.text
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(',')]
    await state.update_data(ingredients=ingredients_list)
    await state.set_state(Admin.allergens)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—Ç—ã')

@admin_private.message(Admin.allergens)
async def proccess_desserts_allergens(message: Message, state: FSMContext):
    user_message = message.text
    await state.update_data(allergens=message.text)
    await state.set_state(Admin.cost)

    if user_message == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.add_categories())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')


@admin_private.message(Admin.cost)
async def procces_pizza_cost(message: Message, state: FSMContext):
    await state.update_data(cost=message.text)
    data = await state.get_data()
    # name = data['position_name']
    # photo = data['position_photo']
    # description = data['description']
    # calorie_content = data['calorie_content']
    # allergens = data['allergens']
    cost = data['cost']
    try:
        # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–¥
        cost = Decimal(data['cost'])
        category_name = '–ü–∏—Ü—Ü–∞'
        category = await sync_to_async(Category.objects.get)(name=category_name)
        
        menu_item = await sync_to_async(Menu.objects.create)(
            photo=data['position_photo'],
            name=data['position_name'],
            weight='500',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            allergens=data['allergens'],
            energy_valuable=data['calorie_content'],
            compounds='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=category,
            price=cost
        )
        ingredients_list = data['ingredients']
        for ingredient_name in ingredients_list:
            await sync_to_async(Ingredients.objects.create)(
                name=ingredient_name,
                dish=menu_item,
                isInDish=True
            )
        await message.answer(f'‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - {cost}')
        await admin_panel(message)
        await state.clear()
    except TypeError as te:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
        await state.set_state(Admin.cost)


@admin_private.callback_query(F.data == 'add_come_out')
async def come_out_menu(callback: CallbackQuery):
    await callback.message.edit_text('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel())


@admin_private.callback_query(F.data == 'mailing')
async def post_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.mailing_state)

    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ ',reply_markup=kb.post_type())

@admin_private.message(Admin.mailing_state)
async def proccess_text(message: Message, state: FSMContext):
    if message.text == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":


        await state.set_state(Admin.mailing_text_only)
    elif message.text == "–° —Ñ–æ—Ç–æ":
        await state.set_state(Admin.mailing_text)


    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=ReplyKeyboardRemove())

@admin_private.message(Admin.mailing_text_only)
async def proccess_text(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.text)
    await state.set_state(Admin.ask)

    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑–∞—Ç—å</b>?')

@admin_private.message(Admin.mailing_text, F.photo)
async def proccess_text(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.caption)
    await state.update_data(mailing_photo=message.photo[-1].file_id)
    await state.set_state(Admin.ask)

    await message.answer('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑–∞—Ç—å</b>?')

@admin_private.message(Admin.ask)
async def procces_ask(message: Message, state: FSMContext):
    await state.update_data(ask=message.text)
    data = await state.get_data()
    if 'mailing_photo' in data:
        photo = data['mailing_photo']
        caption = data['mailing_text']
        text = data['ask']

        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            
            await message.answer_photo(photo=photo, caption=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_no())
    else:
        caption = data['mailing_text']
        text = data['ask']

        if message.text == '–î–∞' or  message.text == '–¥–∞':
            await state.set_state(Admin.confirm_yes)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())

        elif message.text == '–ù–µ—Ç' or  message.text == '–Ω–µ—Ç':
            await state.set_state(Admin.confirm_no)
            await message.answer(text=f'{caption} \n'
                                    '\n'
                                    '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                                    reply_markup=kb.choice_button_yes())


@admin_private.message(Admin.confirm_yes)
async def procces_post_yes(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    text = data['confirm_yes']

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        z = await state.get_data()

        u = await get_users_post()
        if 'mailing_photo' in data:
            c = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']
            for user in u:
                

                await message.bot.send_photo(user['tg_id'], photo=data['mailing_photo'], caption=caption,reply_markup=kb.get_order_post())
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            c = 0
            for user in u:
                

                await message.bot.send_message(user['tg_id'],f'{data["mailing_text"]}',reply_markup=kb.get_order_post())
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        if 'mailing_photo' in data:
            await state.clear()
            await state.set_state(Admin.mailing_text)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())
        else:
            await state.clear()
            await state.set_state(Admin.mailing_text_only)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())

@admin_private.message(Admin.confirm_no)
async def procces_post_no(message: Message, state: FSMContext):
    await state.update_data(confirm_yes=message.text)
    data = await state.get_data()
    # caption = data['mailing_text']
    # photo = data['mailing_photo']
    text = data['confirm_yes']

    if text == '–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å':
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        z = await state.get_data()

        u = await get_users_post()

        
        if 'mailing_photo' in data:
            c = 0
            caption = data['mailing_text']
            photo = data['mailing_photo']
            for user in u:
                

                await message.bot.send_photo(user['tg_id'], photo=data['mailing_photo'], caption=caption)
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
        else:
            c = 0
            for user in u:
                

                await message.bot.send_message(user['tg_id'],f'{data["mailing_text"]}')
                c+=1
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{c} —Å–æ–æ–±—â–µ–Ω–∏–π</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.admin_panel())
            await state.clear()
    if text == '–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        if 'mailing_photo' in data:
            await state.clear()
            await state.set_state(Admin.mailing_text)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())
        else:
            await state.clear()
            await state.set_state(Admin.mailing_text_only)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())     

@admin_private.callback_query(F.data == 'delete_position')
async def delete_position(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())

@admin_private.callback_query(F.data == 'delete_pizza')
async def delete_pizza(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.number_position)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    positions = await get_menus('–ü–∏—Ü—Ü–∞')
    
    positions_text = 'üßæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n'
    for idx, position in enumerate(positions, start=1):
        positions_text += f"{position['id']}. {position['name']}, {position['price']}—Ä, {position['weight']}–≥., {position['energy_valuable']} –∫–∫–∞–ª\n({position['category__name']})\n\n"

    positions_text += 'üëâ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'

    await callback.message.answer(positions_text, reply_markup=kb.offer_cancel())

@admin_private.message(Admin.number_position)
async def proccess_name_pizza(message: Message, state: FSMContext):
    user_message = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–µ
    if user_message.lower() in ['–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∞']:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        positions = await get_menus('–ü–∏—Ü—Ü–∞')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∏–Ω–¥–µ–∫—Å
        position_index = int(user_message) - 1
        if position_index < 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        position_id = position_index + 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_menu_item(position_id)

        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
    except (ValueError, IndexError):
        await message.answer('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())


@admin_private.callback_query(F.data == 'delete_desserts')
async def delete_desserts(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.number_position)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    positions = await get_menus('–î–µ—Å–µ—Ä—Ç—ã')
    
    positions_text = 'üßæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n'
    for idx, position in enumerate(positions, start=1):
        positions_text += f"{position['id']}. {position['name']}, {position['price']}—Ä, {position['weight']}–≥., {position['energy_valuable']} –∫–∫–∞–ª\n({position['category__name']})\n\n"

    positions_text += 'üëâ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'

    await callback.message.answer(positions_text, reply_markup=kb.offer_cancel())


@admin_private.message(Admin.number_position)
async def proccess_name_desserts(message: Message, state: FSMContext):
    user_message = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–µ
    if user_message.lower() in ['–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∞']:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        positions = await get_menus('–î–µ—Å–µ—Ä—Ç—ã')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∏–Ω–¥–µ–∫—Å
        position_index = int(user_message) - 1
        if position_index < 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        position_id = position_index + 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_menu_item(position_id)

        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
    except (ValueError, IndexError):
        await message.answer('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())


@admin_private.callback_query(F.data == 'delete_salads')
async def delete_salads(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.number_position)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    positions = await get_menus("–°–∞–ª–∞—Ç—ã")
    
    positions_text = 'üßæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n'
    for idx, position in enumerate(positions, start=1):
        positions_text += f"{position['id']}. {position['name']}, {position['price']}—Ä, {position['weight']}–≥., {position['energy_valuable']} –∫–∫–∞–ª\n({position['category__name']})\n\n"

    positions_text += 'üëâ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'

    await callback.message.answer(positions_text, reply_markup=kb.offer_cancel())


@admin_private.message(Admin.number_position)
async def proccess_name_salads(message: Message, state: FSMContext):
    user_message = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–µ
    if user_message.lower() in ['–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∞']:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        positions = await get_menus("–°–∞–ª–∞—Ç—ã")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∏–Ω–¥–µ–∫—Å
        position_index = int(user_message) - 1
        if position_index < 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        position_id = position_index + 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_menu_item(position_id)

        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
    except (ValueError, IndexError):
        await message.answer('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())


@admin_private.callback_query(F.data == 'delete_soups')
async def delete_soups(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.number_position)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    positions = await get_menus("–°—É–ø—ã")
    
    positions_text = 'üßæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n'
    for idx, position in enumerate(positions, start=1):
        positions_text += f"{position['id']}. {position['name']}, {position['price']}—Ä, {position['weight']}–≥., {position['energy_valuable']} –∫–∫–∞–ª\n({position['category__name']})\n\n"

    positions_text += 'üëâ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'

    await callback.message.answer(positions_text, reply_markup=kb.offer_cancel())


@admin_private.message(Admin.number_position)
async def proccess_name_soups(message: Message, state: FSMContext):
    user_message = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–µ
    if user_message.lower() in ['–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∞']:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        positions = await get_menus("–°—É–ø—ã")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∏–Ω–¥–µ–∫—Å
        position_index = int(user_message) - 1
        if position_index < 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        position_id = position_index + 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_menu_item(position_id)

        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
    except (ValueError, IndexError):
        await message.answer('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())


@admin_private.callback_query(F.data == 'delete_Drinks')
async def delete_Drinks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Admin.number_position)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    positions = await get_menus("–ù–∞–ø–∏—Ç–∫–∏")
    
    positions_text = 'üßæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n'
    for idx, position in enumerate(positions, start=1):
        positions_text += f"{position['id']}. {position['name']}, {position['price']}—Ä, {position['weight']}–≥., {position['energy_valuable']} –∫–∫–∞–ª\n({position['category__name']})\n\n"

    positions_text += 'üëâ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'

    await callback.message.answer(positions_text, reply_markup=kb.offer_cancel())


@admin_private.message(Admin.number_position)
async def proccess_name_Drinks(message: Message, state: FSMContext):
    user_message = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–µ
    if user_message.lower() in ['–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∞']:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        positions = await get_menus("–ù–∞–ø–∏—Ç–∫–∏")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∏–Ω–¥–µ–∫—Å
        position_index = int(user_message) - 1
        if position_index < 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        position_id = position_index + 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_menu_item(position_id)

        await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
    except (ValueError, IndexError):
        await message.answer('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.delete_categories())


@admin_private.callback_query(F.data == 'delete_come_out')
async def delete_come_out(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.admin_panel())
